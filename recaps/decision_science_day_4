{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SELLER P&L ANALYSIS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "üéØ The goal of this exercise is to compute the P&L associated to each seller  \n",
    "\n",
    "For each `seller_id` we need three items:  \n",
    "\n",
    "- The **revenue**:\n",
    " - 10% fee on sales\n",
    " - 80 BRL per month on Olist\n",
    "\n",
    "\n",
    "- The **cost**:\n",
    " - Review cost according to `{1: 100, 2: 50, 3: 40, 4: 0, 5: 0}` with review score as key and cost in BRL as value\n",
    "\n",
    "\n",
    "- The **profit** made by Olist\n",
    "\n",
    "üí° Let's not start from scratch  \n",
    "‚ùì Import your seller training set and investigate what you already have.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": [
     "challengify"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seller_id</th>\n",
       "      <th>seller_city</th>\n",
       "      <th>seller_state</th>\n",
       "      <th>delay_to_carrier</th>\n",
       "      <th>wait_time</th>\n",
       "      <th>date_first_sale</th>\n",
       "      <th>date_last_sale</th>\n",
       "      <th>months_on_olist</th>\n",
       "      <th>n_orders</th>\n",
       "      <th>quantity</th>\n",
       "      <th>quantity_per_order</th>\n",
       "      <th>sales</th>\n",
       "      <th>share_of_one_stars</th>\n",
       "      <th>share_of_five_stars</th>\n",
       "      <th>review_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3442f8959a84dea7ee197c632cb2df15</td>\n",
       "      <td>campinas</td>\n",
       "      <td>SP</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13.018588</td>\n",
       "      <td>2017-05-05 16:25:11</td>\n",
       "      <td>2017-08-30 12:50:19</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>218.70</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>3.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>d1b65fc7debc3361ea86b5f14c68d2e2</td>\n",
       "      <td>mogi guacu</td>\n",
       "      <td>SP</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.065716</td>\n",
       "      <td>2017-03-29 02:10:34</td>\n",
       "      <td>2018-06-06 20:15:21</td>\n",
       "      <td>14.0</td>\n",
       "      <td>40</td>\n",
       "      <td>41</td>\n",
       "      <td>1.025000</td>\n",
       "      <td>11703.07</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>0.725000</td>\n",
       "      <td>4.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ce3ad9de960102d0677a81f5d0bb7b2d</td>\n",
       "      <td>rio de janeiro</td>\n",
       "      <td>RJ</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.042292</td>\n",
       "      <td>2018-07-30 12:44:49</td>\n",
       "      <td>2018-07-30 12:44:49</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>158.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>c0f3eea2e14555b6faeea3dd58c1b1c3</td>\n",
       "      <td>sao paulo</td>\n",
       "      <td>SP</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.667187</td>\n",
       "      <td>2018-08-03 00:44:08</td>\n",
       "      <td>2018-08-03 00:44:08</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>79.99</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>51a04a8a6bdcb23deccc82b0b80742cf</td>\n",
       "      <td>braganca paulista</td>\n",
       "      <td>SP</td>\n",
       "      <td>3.353727</td>\n",
       "      <td>35.314861</td>\n",
       "      <td>2017-11-14 12:15:25</td>\n",
       "      <td>2017-11-14 12:15:25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>167.99</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2962</th>\n",
       "      <td>98dddbc4601dd4443ca174359b237166</td>\n",
       "      <td>sarandi</td>\n",
       "      <td>PR</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.230822</td>\n",
       "      <td>2018-07-14 03:10:19</td>\n",
       "      <td>2018-07-23 15:34:03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>158.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2963</th>\n",
       "      <td>f8201cab383e484733266d1906e2fdfa</td>\n",
       "      <td>palhoca</td>\n",
       "      <td>SC</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13.045797</td>\n",
       "      <td>2017-06-17 15:30:11</td>\n",
       "      <td>2018-08-11 19:55:17</td>\n",
       "      <td>14.0</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>889.00</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>4.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2964</th>\n",
       "      <td>74871d19219c7d518d0090283e03c137</td>\n",
       "      <td>sao paulo</td>\n",
       "      <td>SP</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.606625</td>\n",
       "      <td>2018-04-05 17:09:46</td>\n",
       "      <td>2018-08-21 19:25:15</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>1.166667</td>\n",
       "      <td>550.04</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2965</th>\n",
       "      <td>e603cf3fec55f8697c9059638d6c8eb5</td>\n",
       "      <td>pelotas</td>\n",
       "      <td>RS</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.657634</td>\n",
       "      <td>2017-02-09 02:43:17</td>\n",
       "      <td>2017-06-16 17:30:16</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8</td>\n",
       "      <td>11</td>\n",
       "      <td>1.375000</td>\n",
       "      <td>297.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>4.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2966</th>\n",
       "      <td>9e25199f6ef7e7c347120ff175652c3b</td>\n",
       "      <td>taubate</td>\n",
       "      <td>SP</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.199456</td>\n",
       "      <td>2017-03-27 10:10:27</td>\n",
       "      <td>2017-03-27 10:10:27</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12.50</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2967 rows √ó 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             seller_id        seller_city seller_state  \\\n",
       "0     3442f8959a84dea7ee197c632cb2df15           campinas           SP   \n",
       "1     d1b65fc7debc3361ea86b5f14c68d2e2         mogi guacu           SP   \n",
       "2     ce3ad9de960102d0677a81f5d0bb7b2d     rio de janeiro           RJ   \n",
       "3     c0f3eea2e14555b6faeea3dd58c1b1c3          sao paulo           SP   \n",
       "4     51a04a8a6bdcb23deccc82b0b80742cf  braganca paulista           SP   \n",
       "...                                ...                ...          ...   \n",
       "2962  98dddbc4601dd4443ca174359b237166            sarandi           PR   \n",
       "2963  f8201cab383e484733266d1906e2fdfa            palhoca           SC   \n",
       "2964  74871d19219c7d518d0090283e03c137          sao paulo           SP   \n",
       "2965  e603cf3fec55f8697c9059638d6c8eb5            pelotas           RS   \n",
       "2966  9e25199f6ef7e7c347120ff175652c3b            taubate           SP   \n",
       "\n",
       "      delay_to_carrier  wait_time     date_first_sale      date_last_sale  \\\n",
       "0             0.000000  13.018588 2017-05-05 16:25:11 2017-08-30 12:50:19   \n",
       "1             0.000000   9.065716 2017-03-29 02:10:34 2018-06-06 20:15:21   \n",
       "2             0.000000   4.042292 2018-07-30 12:44:49 2018-07-30 12:44:49   \n",
       "3             0.000000   5.667187 2018-08-03 00:44:08 2018-08-03 00:44:08   \n",
       "4             3.353727  35.314861 2017-11-14 12:15:25 2017-11-14 12:15:25   \n",
       "...                ...        ...                 ...                 ...   \n",
       "2962          0.000000   8.230822 2018-07-14 03:10:19 2018-07-23 15:34:03   \n",
       "2963          0.000000  13.045797 2017-06-17 15:30:11 2018-08-11 19:55:17   \n",
       "2964          0.000000   3.606625 2018-04-05 17:09:46 2018-08-21 19:25:15   \n",
       "2965          0.000000   6.657634 2017-02-09 02:43:17 2017-06-16 17:30:16   \n",
       "2966          0.000000   8.199456 2017-03-27 10:10:27 2017-03-27 10:10:27   \n",
       "\n",
       "      months_on_olist  n_orders  quantity  quantity_per_order     sales  \\\n",
       "0                 4.0         3         3            1.000000    218.70   \n",
       "1                14.0        40        41            1.025000  11703.07   \n",
       "2                 0.0         1         1            1.000000    158.00   \n",
       "3                 0.0         1         1            1.000000     79.99   \n",
       "4                 0.0         1         1            1.000000    167.99   \n",
       "...               ...       ...       ...                 ...       ...   \n",
       "2962              0.0         2         2            1.000000    158.00   \n",
       "2963             14.0        10        10            1.000000    889.00   \n",
       "2964              5.0         6         7            1.166667    550.04   \n",
       "2965              4.0         8        11            1.375000    297.00   \n",
       "2966              0.0         1         1            1.000000     12.50   \n",
       "\n",
       "      share_of_one_stars  share_of_five_stars  review_score  \n",
       "0               0.333333             0.333333          3.00  \n",
       "1               0.050000             0.725000          4.55  \n",
       "2               0.000000             1.000000          5.00  \n",
       "3               0.000000             1.000000          5.00  \n",
       "4               1.000000             0.000000          1.00  \n",
       "...                  ...                  ...           ...  \n",
       "2962            0.000000             1.000000          5.00  \n",
       "2963            0.100000             0.500000          4.10  \n",
       "2964            0.000000             1.000000          5.00  \n",
       "2965            0.000000             0.500000          4.25  \n",
       "2966            0.000000             0.000000          4.00  \n",
       "\n",
       "[2967 rows x 15 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from olist.seller import Seller\n",
    "Seller().get_training_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>seller_id</th>\n",
       "      <th>dim_is_five_star</th>\n",
       "      <th>dim_is_one_star</th>\n",
       "      <th>review_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00010242fe8c5a6d1ba2dd792cb16214</td>\n",
       "      <td>48436dade18ac8b2bce089ec2a041202</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00018f77f2f0320c557190d7a144bdd3</td>\n",
       "      <td>dd7ddc04e1b6c2c614352b383efe2d36</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>000229ec398224ef6ca0657da4fc703e</td>\n",
       "      <td>5b51032eddd242adc84c38acab88f23d</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00024acbcdf0a6daa1e931b038114c75</td>\n",
       "      <td>9d7a1d34a5052409006425275ba1c2b4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00042b26cf59d7ce69dfabb4e55b4fd9</td>\n",
       "      <td>df560393f3a51e74553ab94004ba5c87</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           order_id                         seller_id  \\\n",
       "0  00010242fe8c5a6d1ba2dd792cb16214  48436dade18ac8b2bce089ec2a041202   \n",
       "1  00018f77f2f0320c557190d7a144bdd3  dd7ddc04e1b6c2c614352b383efe2d36   \n",
       "2  000229ec398224ef6ca0657da4fc703e  5b51032eddd242adc84c38acab88f23d   \n",
       "3  00024acbcdf0a6daa1e931b038114c75  9d7a1d34a5052409006425275ba1c2b4   \n",
       "4  00042b26cf59d7ce69dfabb4e55b4fd9  df560393f3a51e74553ab94004ba5c87   \n",
       "\n",
       "   dim_is_five_star  dim_is_one_star  review_score  \n",
       "0                 1                0             5  \n",
       "1                 0                0             4  \n",
       "2                 1                0             5  \n",
       "3                 0                0             4  \n",
       "4                 1                0             5  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from olist.seller_updated import Seller as SellerUpdated\n",
    "df = SellerUpdated().get_review_score()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>seller_id</th>\n",
       "      <th>dim_is_five_star</th>\n",
       "      <th>dim_is_one_star</th>\n",
       "      <th>review_score</th>\n",
       "      <th>cost_of_review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00010242fe8c5a6d1ba2dd792cb16214</td>\n",
       "      <td>48436dade18ac8b2bce089ec2a041202</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00018f77f2f0320c557190d7a144bdd3</td>\n",
       "      <td>dd7ddc04e1b6c2c614352b383efe2d36</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>000229ec398224ef6ca0657da4fc703e</td>\n",
       "      <td>5b51032eddd242adc84c38acab88f23d</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00024acbcdf0a6daa1e931b038114c75</td>\n",
       "      <td>9d7a1d34a5052409006425275ba1c2b4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00042b26cf59d7ce69dfabb4e55b4fd9</td>\n",
       "      <td>df560393f3a51e74553ab94004ba5c87</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           order_id                         seller_id  \\\n",
       "0  00010242fe8c5a6d1ba2dd792cb16214  48436dade18ac8b2bce089ec2a041202   \n",
       "1  00018f77f2f0320c557190d7a144bdd3  dd7ddc04e1b6c2c614352b383efe2d36   \n",
       "2  000229ec398224ef6ca0657da4fc703e  5b51032eddd242adc84c38acab88f23d   \n",
       "3  00024acbcdf0a6daa1e931b038114c75  9d7a1d34a5052409006425275ba1c2b4   \n",
       "4  00042b26cf59d7ce69dfabb4e55b4fd9  df560393f3a51e74553ab94004ba5c87   \n",
       "\n",
       "   dim_is_five_star  dim_is_one_star  review_score  cost_of_review  \n",
       "0                 1                0             5               0  \n",
       "1                 0                0             4               0  \n",
       "2                 1                0             5               0  \n",
       "3                 0                0             4               0  \n",
       "4                 1                0             5               0  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['cost_of_review'] = df.review_score.map({1: 100, 2: 50, 3: 40, 4: 0, 5: 0})\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "seller_id\n",
       "0015a82c2db000af6aaaf3ae2ecb0532     100\n",
       "001cca7ae9ae17fb1caed9dfb1094831    3560\n",
       "001e6ad469a905060d959994f1b41e4f     100\n",
       "002100f778ceb8431b7a1020ff7ab48f    1110\n",
       "003554e2dce176b5555353e4f3555ac8       0\n",
       "                                    ... \n",
       "ffcfefa19b08742c5d315f2791395ee5     100\n",
       "ffdd9f82b9a447f6f8d4b91554cc7dd3     190\n",
       "ffeee66ac5d5a62fe688b9d26f83f534     200\n",
       "fffd5413c0700ac820c7069d66d98c89    1360\n",
       "ffff564a4f9085cd26170f4732393726    1420\n",
       "Name: cost_of_review, Length: 3090, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('seller_id').cost_of_review.sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "‚ùì What is missing?  \n",
    "Write down a strategy to get your missing columns  \n",
    "Re-use as much of what has already been coded in `seller.py` as possible"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Your pseudo-code"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "‚ùì Make a copy of `seller.py`, rename it `seller_updated.py` and update it accordingly"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "challengify"
    ]
   },
   "source": [
    "```python\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from olist.data import Olist\n",
    "from olist.order import Order\n",
    "\n",
    "\n",
    "class Seller:\n",
    "    def __init__(self):\n",
    "        # Import data only once\n",
    "        olist = Olist()\n",
    "        self.data = olist.get_data()\n",
    "        self.order = Order()\n",
    "\n",
    "    def get_seller_features(self):\n",
    "        \"\"\"\n",
    "        Returns a DataFrame with:\n",
    "        'seller_id', 'seller_city', 'seller_state'\n",
    "        \"\"\"\n",
    "        sellers = self.data[\n",
    "            \"sellers\"\n",
    "        ].copy()  # Make a copy before using inplace=True so as to avoid modifying self.data\n",
    "        sellers.drop(\"seller_zip_code_prefix\", axis=1, inplace=True)\n",
    "        sellers.drop_duplicates(inplace=True)  # There can be multiple rows per seller\n",
    "        return sellers\n",
    "\n",
    "    def get_seller_delay_wait_time(self):\n",
    "        \"\"\"\n",
    "        Returns a DataFrame with:\n",
    "        'seller_id', 'delay_to_carrier', 'wait_time'\n",
    "        \"\"\"\n",
    "        # Get data\n",
    "        order_items = self.data[\"order_items\"].copy()\n",
    "        orders = self.data[\"orders\"].query(\"order_status=='delivered'\").copy()\n",
    "\n",
    "        ship = order_items.merge(orders, on=\"order_id\")\n",
    "\n",
    "        # Handle datetime\n",
    "        ship.loc[:, \"shipping_limit_date\"] = pd.to_datetime(ship[\"shipping_limit_date\"])\n",
    "        ship.loc[:, \"order_delivered_carrier_date\"] = pd.to_datetime(\n",
    "            ship[\"order_delivered_carrier_date\"]\n",
    "        )\n",
    "        ship.loc[:, \"order_delivered_customer_date\"] = pd.to_datetime(\n",
    "            ship[\"order_delivered_customer_date\"]\n",
    "        )\n",
    "        ship.loc[:, \"order_purchase_timestamp\"] = pd.to_datetime(\n",
    "            ship[\"order_purchase_timestamp\"]\n",
    "        )\n",
    "\n",
    "        # Compute delay and wait_time\n",
    "        def delay_to_logistic_partner(d):\n",
    "            days = np.mean(\n",
    "                (d.order_delivered_carrier_date - d.shipping_limit_date)\n",
    "                / np.timedelta64(24, \"h\")\n",
    "            )\n",
    "            if days > 0:\n",
    "                return days\n",
    "            else:\n",
    "                return 0\n",
    "\n",
    "        def order_wait_time(d):\n",
    "            days = np.mean(\n",
    "                (d.order_delivered_customer_date - d.order_purchase_timestamp)\n",
    "                / np.timedelta64(24, \"h\")\n",
    "            )\n",
    "            return days\n",
    "\n",
    "        delay = ship.groupby(\"seller_id\").apply(delay_to_logistic_partner).reset_index()\n",
    "        delay.columns = [\"seller_id\", \"delay_to_carrier\"]\n",
    "\n",
    "        wait = ship.groupby(\"seller_id\").apply(order_wait_time).reset_index()\n",
    "        wait.columns = [\"seller_id\", \"wait_time\"]\n",
    "\n",
    "        df = delay.merge(wait, on=\"seller_id\")\n",
    "\n",
    "        return df\n",
    "\n",
    "    def get_active_dates(self):\n",
    "        \"\"\"\n",
    "        Returns a DataFrame with:\n",
    "        'seller_id', 'date_first_sale', 'date_last_sale', 'months_on_olist'\n",
    "        \"\"\"\n",
    "        # First, get only orders that are approved\n",
    "        orders_approved = self.data[\"orders\"][\n",
    "            [\"order_id\", \"order_approved_at\"]\n",
    "        ].dropna()\n",
    "\n",
    "        # Then, create a (orders <> sellers) join table because a seller can appear multiple times in the same order\n",
    "        orders_sellers = orders_approved.merge(self.data[\"order_items\"], on=\"order_id\")[\n",
    "            [\"order_id\", \"seller_id\", \"order_approved_at\"]\n",
    "        ].drop_duplicates()\n",
    "        orders_sellers[\"order_approved_at\"] = pd.to_datetime(\n",
    "            orders_sellers[\"order_approved_at\"]\n",
    "        )\n",
    "\n",
    "        # Compute dates\n",
    "        orders_sellers[\"date_first_sale\"] = orders_sellers[\"order_approved_at\"]\n",
    "        orders_sellers[\"date_last_sale\"] = orders_sellers[\"order_approved_at\"]\n",
    "        df = orders_sellers.groupby(\"seller_id\").agg(\n",
    "            {\"date_first_sale\": min, \"date_last_sale\": max}\n",
    "        )\n",
    "        df[\"months_on_olist\"] = round(\n",
    "            (df[\"date_last_sale\"] - df[\"date_first_sale\"]) / np.timedelta64(1, \"M\")\n",
    "        )\n",
    "        return df\n",
    "\n",
    "    def get_quantity(self):\n",
    "        \"\"\"\n",
    "        Returns a DataFrame with:\n",
    "        'seller_id', 'n_orders', 'quantity', 'quantity_per_order'\n",
    "        \"\"\"\n",
    "        order_items = self.data[\"order_items\"]\n",
    "\n",
    "        n_orders = order_items.groupby(\"seller_id\")[\"order_id\"].nunique().reset_index()\n",
    "        n_orders.columns = [\"seller_id\", \"n_orders\"]\n",
    "\n",
    "        quantity = order_items.groupby(\"seller_id\", as_index=False).agg(\n",
    "            {\"order_id\": \"count\"}\n",
    "        )\n",
    "        quantity.columns = [\"seller_id\", \"quantity\"]\n",
    "\n",
    "        result = n_orders.merge(quantity, on=\"seller_id\")\n",
    "        result[\"quantity_per_order\"] = result[\"quantity\"] / result[\"n_orders\"]\n",
    "        return result\n",
    "\n",
    "    def get_sales(self):\n",
    "        \"\"\"\n",
    "        Returns a DataFrame with:\n",
    "        'seller_id', 'sales'\n",
    "        \"\"\"\n",
    "        return (\n",
    "            self.data[\"order_items\"][[\"seller_id\", \"price\"]]\n",
    "            .groupby(\"seller_id\")\n",
    "            .sum()\n",
    "            .rename(columns={\"price\": \"sales\"})\n",
    "        )\n",
    "\n",
    "    def get_review_score(self):\n",
    "        \"\"\"\n",
    "        Returns a DataFrame with:\n",
    "        'seller_id', 'share_of_five_stars', 'share_of_one_stars', 'review_score', 'cost_of_reviews'\n",
    "        \"\"\"\n",
    "\n",
    "        orders_reviews = self.order.get_review_score()\n",
    "        orders_sellers = self.data[\"order_items\"][\n",
    "            [\"order_id\", \"seller_id\"]\n",
    "        ].drop_duplicates()\n",
    "\n",
    "        df = orders_sellers.merge(orders_reviews, on=\"order_id\")\n",
    "        df[\"cost_of_review\"] = df.review_score.map({1: 100, 2: 50, 3: 40, 4: 0, 5: 0})\n",
    "\n",
    "        res = df.groupby(\"seller_id\", as_index=False).agg(\n",
    "            {\n",
    "                \"dim_is_one_star\": \"mean\",\n",
    "                \"dim_is_five_star\": \"mean\",\n",
    "                \"review_score\": \"mean\",\n",
    "                \"cost_of_review\": \"sum\",\n",
    "            }\n",
    "        )\n",
    "        # Rename columns\n",
    "        res.columns = [\n",
    "            \"seller_id\",\n",
    "            \"share_of_one_stars\",\n",
    "            \"share_of_five_stars\",\n",
    "            \"review_score\",\n",
    "            \"cost_of_reviews\",\n",
    "        ]\n",
    "\n",
    "        return res\n",
    "\n",
    "    def get_training_data(self):\n",
    "        \"\"\"\n",
    "        Returns a DataFrame with:\n",
    "        ['seller_id', 'seller_city', 'seller_state', 'delay_to_carrier',\n",
    "        'wait_time', 'date_first_sale', 'date_last_sale', 'months_on_olist', 'share_of_one_stars',\n",
    "        'share_of_five_stars', 'review_score', 'cost_of_reviews', 'n_orders', 'quantity',\n",
    "        'quantity_per_order', 'sales']\n",
    "        \"\"\"\n",
    "\n",
    "        training_set = (\n",
    "            self.get_seller_features()\n",
    "            .merge(self.get_seller_delay_wait_time(), on=\"seller_id\")\n",
    "            .merge(self.get_active_dates(), on=\"seller_id\")\n",
    "            .merge(self.get_quantity(), on=\"seller_id\")\n",
    "            .merge(self.get_sales(), on=\"seller_id\")\n",
    "        )\n",
    "\n",
    "        if self.get_review_score() is not None:\n",
    "            training_set = training_set.merge(self.get_review_score(), on=\"seller_id\")\n",
    "\n",
    "        # Add the revenue and profits columns\n",
    "        # 10% fee on sales\n",
    "        # 80 BRL per month on Olist\n",
    "        training_set[\"revenue\"] = (\n",
    "            0.1 * training_set.sales + 80 * training_set.months_on_olist\n",
    "        )\n",
    "        training_set[\"profits\"] = (\n",
    "            training_set[\"revenue\"] - training_set[\"cost_of_reviews\"]\n",
    "        )\n",
    "\n",
    "        return training_set\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "‚ùì Compute seller profits"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "challengify"
    ]
   },
   "source": [
    "> YOUR ANSWER HERE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "‚ùì Load your updated DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "tags": [
     "challengify"
    ]
   },
   "outputs": [],
   "source": [
    "sellers = SellerUpdated().get_training_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "‚ùì Sort sellers by profit, and analyse their profitability: conclude on a possible strategy for Olist!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seller_id</th>\n",
       "      <th>seller_city</th>\n",
       "      <th>seller_state</th>\n",
       "      <th>delay_to_carrier</th>\n",
       "      <th>wait_time</th>\n",
       "      <th>date_first_sale</th>\n",
       "      <th>date_last_sale</th>\n",
       "      <th>months_on_olist</th>\n",
       "      <th>n_orders</th>\n",
       "      <th>quantity</th>\n",
       "      <th>quantity_per_order</th>\n",
       "      <th>sales</th>\n",
       "      <th>share_of_one_stars</th>\n",
       "      <th>share_of_five_stars</th>\n",
       "      <th>review_score</th>\n",
       "      <th>cost_of_reviews</th>\n",
       "      <th>revenue</th>\n",
       "      <th>profits</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6560211a19b47992c3666cc44a7e94c0</td>\n",
       "      <td>sao paulo</td>\n",
       "      <td>SP</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.539486</td>\n",
       "      <td>2017-02-17 07:45:11</td>\n",
       "      <td>2018-08-29 09:25:12</td>\n",
       "      <td>18.0</td>\n",
       "      <td>1854</td>\n",
       "      <td>2033</td>\n",
       "      <td>1.096548</td>\n",
       "      <td>123304.83</td>\n",
       "      <td>0.124729</td>\n",
       "      <td>0.514100</td>\n",
       "      <td>3.937093</td>\n",
       "      <td>35290</td>\n",
       "      <td>13770.483</td>\n",
       "      <td>-21519.517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4a3ca9315b744ce9f8e9374361493884</td>\n",
       "      <td>ibitinga</td>\n",
       "      <td>SP</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.416471</td>\n",
       "      <td>2017-01-08 09:45:12</td>\n",
       "      <td>2018-08-27 11:04:18</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1806</td>\n",
       "      <td>1987</td>\n",
       "      <td>1.100221</td>\n",
       "      <td>200472.92</td>\n",
       "      <td>0.143809</td>\n",
       "      <td>0.482510</td>\n",
       "      <td>3.827873</td>\n",
       "      <td>39400</td>\n",
       "      <td>21647.292</td>\n",
       "      <td>-17752.708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cc419e0650a3c5ba77189a1882b7556a</td>\n",
       "      <td>santo andre</td>\n",
       "      <td>SP</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.539753</td>\n",
       "      <td>2017-02-02 17:10:21</td>\n",
       "      <td>2018-08-28 03:45:15</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1706</td>\n",
       "      <td>1775</td>\n",
       "      <td>1.040445</td>\n",
       "      <td>104288.42</td>\n",
       "      <td>0.116092</td>\n",
       "      <td>0.584483</td>\n",
       "      <td>4.077586</td>\n",
       "      <td>29530</td>\n",
       "      <td>11948.842</td>\n",
       "      <td>-17581.158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ea8482cd71df3c1969d7b9473ff13abc</td>\n",
       "      <td>sao paulo</td>\n",
       "      <td>SP</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.315562</td>\n",
       "      <td>2017-08-16 15:15:26</td>\n",
       "      <td>2018-08-25 02:45:21</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1146</td>\n",
       "      <td>1203</td>\n",
       "      <td>1.049738</td>\n",
       "      <td>37177.52</td>\n",
       "      <td>0.113935</td>\n",
       "      <td>0.527607</td>\n",
       "      <td>3.997371</td>\n",
       "      <td>20220</td>\n",
       "      <td>4677.752</td>\n",
       "      <td>-15542.248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8b321bb669392f5163d04c59e235e066</td>\n",
       "      <td>sao paulo</td>\n",
       "      <td>SP</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.616899</td>\n",
       "      <td>2017-10-27 16:31:30</td>\n",
       "      <td>2018-08-21 17:08:38</td>\n",
       "      <td>10.0</td>\n",
       "      <td>943</td>\n",
       "      <td>1018</td>\n",
       "      <td>1.079533</td>\n",
       "      <td>17535.69</td>\n",
       "      <td>0.118211</td>\n",
       "      <td>0.568690</td>\n",
       "      <td>4.074547</td>\n",
       "      <td>15440</td>\n",
       "      <td>2553.569</td>\n",
       "      <td>-12886.431</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          seller_id  seller_city seller_state  \\\n",
       "0  6560211a19b47992c3666cc44a7e94c0    sao paulo           SP   \n",
       "1  4a3ca9315b744ce9f8e9374361493884     ibitinga           SP   \n",
       "2  cc419e0650a3c5ba77189a1882b7556a  santo andre           SP   \n",
       "3  ea8482cd71df3c1969d7b9473ff13abc    sao paulo           SP   \n",
       "4  8b321bb669392f5163d04c59e235e066    sao paulo           SP   \n",
       "\n",
       "   delay_to_carrier  wait_time     date_first_sale      date_last_sale  \\\n",
       "0               0.0   9.539486 2017-02-17 07:45:11 2018-08-29 09:25:12   \n",
       "1               0.0  14.416471 2017-01-08 09:45:12 2018-08-27 11:04:18   \n",
       "2               0.0  11.539753 2017-02-02 17:10:21 2018-08-28 03:45:15   \n",
       "3               0.0  13.315562 2017-08-16 15:15:26 2018-08-25 02:45:21   \n",
       "4               0.0  12.616899 2017-10-27 16:31:30 2018-08-21 17:08:38   \n",
       "\n",
       "   months_on_olist  n_orders  quantity  quantity_per_order      sales  \\\n",
       "0             18.0      1854      2033            1.096548  123304.83   \n",
       "1             20.0      1806      1987            1.100221  200472.92   \n",
       "2             19.0      1706      1775            1.040445  104288.42   \n",
       "3             12.0      1146      1203            1.049738   37177.52   \n",
       "4             10.0       943      1018            1.079533   17535.69   \n",
       "\n",
       "   share_of_one_stars  share_of_five_stars  review_score  cost_of_reviews  \\\n",
       "0            0.124729             0.514100      3.937093            35290   \n",
       "1            0.143809             0.482510      3.827873            39400   \n",
       "2            0.116092             0.584483      4.077586            29530   \n",
       "3            0.113935             0.527607      3.997371            20220   \n",
       "4            0.118211             0.568690      4.074547            15440   \n",
       "\n",
       "     revenue    profits  \n",
       "0  13770.483 -21519.517  \n",
       "1  21647.292 -17752.708  \n",
       "2  11948.842 -17581.158  \n",
       "3   4677.752 -15542.248  \n",
       "4   2553.569 -12886.431  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_sellers = sellers.sort_values('profits', ignore_index=True)\n",
    "sorted_sellers.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "tags": [
     "challengify"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sorted_sellers.profits.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "total_profits = sorted_sellers.profits.sum()\n",
    "(total_profits - sorted_sellers.cumsum().profits).plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# IT Costs\n",
    "# it_costs = A * n_total_orders ** 1/2\n",
    "# BRL 500,000 for the entire orders in the dataset"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
